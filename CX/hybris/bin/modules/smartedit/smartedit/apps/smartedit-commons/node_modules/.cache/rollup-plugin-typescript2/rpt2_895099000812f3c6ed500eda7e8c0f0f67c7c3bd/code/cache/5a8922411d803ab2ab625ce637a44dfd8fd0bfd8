{"code":"var _a;\r\nimport { __awaiter, __decorate, __metadata } from \"tslib\";\r\n/*\r\n * Copyright (c) 2022 SAP SE or an SAP affiliate company. All rights reserved.\r\n */\r\n/**\r\n * @ngdoc overview\r\n * @name cmsitemsRestService\r\n *\r\n * @description\r\n * The cmsitemsRestService provides a service to CRUD operations on CMS Items API.\r\n */\r\nimport { EvictionTag, Cached, OperationContextRegistered, InvalidateCache } from '@smart/utils';\r\nimport * as lodash from 'lodash';\r\nimport { SeDowngradeService } from '../../di';\r\nimport { CONTEXT_SITE_ID, CMSITEMS_UPDATE_EVENT } from '../../utils/smarteditconstants';\r\nimport { rarelyChangingContent, userEvictionTag } from '../cache';\r\nimport { ICatalogService, IRestServiceFactory } from '../interfaces';\r\nimport { LanguageService } from '../language/LanguageService';\r\nexport const cmsitemsUri = `/cmswebservices/v1/sites/${CONTEXT_SITE_ID}/cmsitems`;\r\nexport const cmsitemsEvictionTag = new EvictionTag({ event: CMSITEMS_UPDATE_EVENT });\r\n/**\r\n * @ngdoc service\r\n * @name cmsitemsRestService.cmsitemsRestService\r\n *\r\n * @description\r\n * Service to deal with CMS Items related CRUD operations.\r\n */\r\nlet /* @ngInject */ CmsitemsRestService = class /* @ngInject */ CmsitemsRestService {\r\n    constructor(restServiceFactory, catalogService, languageService) {\r\n        this.restServiceFactory = restServiceFactory;\r\n        this.catalogService = catalogService;\r\n        this.languageService = languageService;\r\n        this.cmsitemsUuidsUri = `/cmswebservices/v1/sites/${CONTEXT_SITE_ID}/cmsitems/uuids`;\r\n        this.resource = restServiceFactory.get(cmsitemsUri);\r\n        this.versionedResource = restServiceFactory.get(cmsitemsUri + '/:itemUuid');\r\n        this.uuidsResource = restServiceFactory.get(this.cmsitemsUuidsUri);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getByIdAndVersion\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Get the CMS Item that matches the given item uuid (Universally Unique Identifier) for a given version.\r\n     *\r\n     * @param {String} cmsitemUuid The CMS Item uuid\r\n     * @param {String} versionId The uid of the version to be retrieved.\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getByIdAndVersion(itemUuid, versionId, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            options = yield this.setHeaderInfo(options);\r\n            return this.versionedResource.get({\r\n                itemUuid,\r\n                versionId\r\n            }, options);\r\n        });\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#get\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Fetch CMS Items search result by making a REST call to the CMS Items API.\r\n     * A search can be performed by a typeCode (optionnaly in combination of a mask parameter), or by providing a list of cms items uuid.\r\n     *\r\n     * @param {Object} queryParams The object representing the query params\r\n     * @param {String} queryParams.pageSize number of items in the page\r\n     * @param {String} queryParams.currentPage current page number\r\n     * @param {String =} queryParams.typeCode for filtering on the cms item typeCode\r\n     * @param {String =} queryParams.mask for filtering the search\r\n     * @param {String =} queryParams.itemSearchParams search on additional fields using a comma separated list of field name and value\r\n     * pairs which are separated by a colon. Exact matches only.\r\n     * @param {String =} queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param {String =} queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the paged search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    get(queryParams, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            options = yield this.setHeaderInfo(options);\r\n            return this.catalogService.retrieveUriContext().then((uriContext) => {\r\n                const catalogDetailsParams = {\r\n                    catalogId: queryParams.catalogId || uriContext.CURRENT_CONTEXT_CATALOG,\r\n                    catalogVersion: queryParams.catalogVersion || uriContext.CURRENT_CONTEXT_CATALOG_VERSION\r\n                };\r\n                queryParams = lodash.merge(catalogDetailsParams, queryParams);\r\n                return this.restServiceFactory.get(cmsitemsUri).get(queryParams, options);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getByIds\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Fetch CMS Items by uuids, making a POST call to the CMS Items API.\r\n     * A search can be performed by providing a list of cms items uuid.\r\n     *\r\n     * @param {string[] =} uuids list of cms item uuids\r\n     *\r\n     * @returns {Promise<CMSItem[]>} If request is successful, it returns a promise that resolves to the result. If the\r\n     * request fails, it resolves with errors from the backend. Be mindful that the response payload size could\r\n     * increase dramatically depending on the number of uuids that you send on the request.\r\n     */\r\n    getByIds(uuids, fields) {\r\n        return this.getByIdsNoCache(uuids, fields);\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#update\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Update a CMS Item.\r\n     *\r\n     * @param {Object} cmsitem The object representing the CMS Item to update\r\n     * @param {String} cmsitem.identifier The cms item identifier (uuid)\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the updated CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    update(cmsitem, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            options = yield this.setHeaderInfo(options);\r\n            return this.resource.update(cmsitem, options);\r\n        });\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#delete\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Remove a CMS Item.\r\n     *\r\n     * @param {Number} cmsitemUuid The CMS Item uuid\r\n     */\r\n    delete(identifier, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            options = yield this.setHeaderInfo(options);\r\n            return this.resource.remove({\r\n                identifier\r\n            }, options);\r\n        });\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#create\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Create a new CMS Item.\r\n     *\r\n     * @param {Object} cmsitem The object representing the CMS Item to create\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    create(cmsitem, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            options = yield this.setHeaderInfo(options);\r\n            return this.catalogService.getCatalogVersionUUid().then((catalogVersionUUid) => {\r\n                cmsitem.catalogVersion = cmsitem.catalogVersion || catalogVersionUUid;\r\n                if (cmsitem.onlyOneRestrictionMustApply === undefined) {\r\n                    cmsitem.onlyOneRestrictionMustApply = false;\r\n                }\r\n                return this.resource.save(cmsitem, options);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * The function is same as getByIds but it doesn't use caching, it will request data from backend every time.\r\n     *\r\n     * If request is successful, it returns a promise that resolves to the result. If the\r\n     * request fails, it resolves with errors from the backend. Be mindful that the response payload size could\r\n     * increase dramatically depending on the number of uuids that you send on the request.\r\n     */\r\n    getByIdsNoCache(uuids, fields, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            uuids = Array.from(new Set(uuids)); // removing duplicates\r\n            options = yield this.setHeaderInfo(options);\r\n            return this.catalogService.getCatalogVersionUUid().then((catalogVersion) => {\r\n                const payload = {\r\n                    catalogVersion,\r\n                    uuids,\r\n                    fields\r\n                };\r\n                return this.uuidsResource.save(payload, options);\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getById\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Get the CMS Item that matches the given item uuid (Universally Unique Identifier).\r\n     *\r\n     * @param {Number} cmsitemUuid The CMS Item uuid\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getById(cmsitemUuid, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            options = yield this.setHeaderInfo(options);\r\n            return this.resource.getById(cmsitemUuid, options);\r\n        });\r\n    }\r\n    setDefaultHeader() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const localeIsoCode = yield this.languageService.getResolveLocaleIsoCode();\r\n            return {\r\n                headers: { 'Accept-Language': localeIsoCode }\r\n            };\r\n        });\r\n    }\r\n    setHeaderInfo(options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const defaultHeader = yield this.setDefaultHeader();\r\n            if (options == null) {\r\n                options = defaultHeader;\r\n            }\r\n            else {\r\n                options = {\r\n                    headers: Object.assign(Object.assign({}, options.headers), defaultHeader.headers)\r\n                };\r\n            }\r\n            return options;\r\n        });\r\n    }\r\n};\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag, cmsitemsEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, String, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ CmsitemsRestService.prototype, \"getByIdAndVersion\", null);\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag, cmsitemsEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ CmsitemsRestService.prototype, \"get\", null);\r\n__decorate([\r\n    Cached({ actions: [rarelyChangingContent], tags: [userEvictionTag, cmsitemsEvictionTag] }),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Array, String]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ CmsitemsRestService.prototype, \"getByIds\", null);\r\n__decorate([\r\n    InvalidateCache(cmsitemsEvictionTag),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof T !== \"undefined\" && T) === \"function\" ? _a : Object, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ CmsitemsRestService.prototype, \"update\", null);\r\n__decorate([\r\n    InvalidateCache(cmsitemsEvictionTag),\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [String, Object]),\r\n    __metadata(\"design:returntype\", Promise)\r\n], /* @ngInject */ CmsitemsRestService.prototype, \"delete\", null);\r\n/* @ngInject */ CmsitemsRestService = __decorate([\r\n    OperationContextRegistered(cmsitemsUri.replace(/CONTEXT_SITE_ID/, ':CONTEXT_SITE_ID'), 'CMS'),\r\n    SeDowngradeService(),\r\n    __metadata(\"design:paramtypes\", [IRestServiceFactory,\r\n        ICatalogService,\r\n        LanguageService])\r\n], /* @ngInject */ CmsitemsRestService);\r\nexport { /* @ngInject */ CmsitemsRestService };\r\n//# sourceMappingURL=CmsitemsRestService.js.map","references":["/home/acxias/Documents/CX/hybris/bin/modules/smartedit/smartedit/apps/smart-utils/dist/index.d.ts","/home/acxias/Documents/CX/hybris/bin/modules/smartedit/smartedittools/common/temp/node_modules/.pnpm/@types+lodash@4.14.159/node_modules/@types/lodash/ts3.1/index.d.ts","/home/acxias/Documents/CX/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/di/index.ts","/home/acxias/Documents/CX/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/utils/smarteditconstants.ts","/home/acxias/Documents/CX/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/cache/index.ts","/home/acxias/Documents/CX/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/interfaces/index.ts","/home/acxias/Documents/CX/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/src/services/language/LanguageService.ts"],"map":"{\"version\":3,\"file\":\"CmsitemsRestService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/workflow/CmsitemsRestService.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/acxias/Documents/CX/hybris/bin/modules/smartedit/smartedit/apps/smartedit-commons/node_modules/.cache/rollup-plugin-typescript2/placeholder/services/workflow/CmsitemsRestService.d.ts","writeByteOrderMark":false,"text":"/**\r\n * @ngdoc overview\r\n * @name cmsitemsRestService\r\n *\r\n * @description\r\n * The cmsitemsRestService provides a service to CRUD operations on CMS Items API.\r\n */\r\nimport { EvictionTag, IRestOptions } from '@smart/utils';\r\nimport { IPage, ICatalogService, IRestServiceFactory, CMSItemSearch, CMSItem } from '../interfaces';\r\nimport { LanguageService } from '../language/LanguageService';\r\nexport declare const cmsitemsUri: string;\r\nexport declare const cmsitemsEvictionTag: EvictionTag;\r\n/**\r\n * @ngdoc service\r\n * @name cmsitemsRestService.cmsitemsRestService\r\n *\r\n * @description\r\n * Service to deal with CMS Items related CRUD operations.\r\n */\r\nexport declare class CmsitemsRestService {\r\n    private readonly restServiceFactory;\r\n    private readonly catalogService;\r\n    private readonly languageService;\r\n    private readonly cmsitemsUuidsUri;\r\n    private readonly resource;\r\n    private readonly versionedResource;\r\n    private readonly uuidsResource;\r\n    constructor(restServiceFactory: IRestServiceFactory, catalogService: ICatalogService, languageService: LanguageService);\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getByIdAndVersion\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Get the CMS Item that matches the given item uuid (Universally Unique Identifier) for a given version.\r\n     *\r\n     * @param {String} cmsitemUuid The CMS Item uuid\r\n     * @param {String} versionId The uid of the version to be retrieved.\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getByIdAndVersion<T extends CMSItem = CMSItem>(itemUuid: string, versionId: string, options?: IRestOptions): Promise<T>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#get\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Fetch CMS Items search result by making a REST call to the CMS Items API.\r\n     * A search can be performed by a typeCode (optionnaly in combination of a mask parameter), or by providing a list of cms items uuid.\r\n     *\r\n     * @param {Object} queryParams The object representing the query params\r\n     * @param {String} queryParams.pageSize number of items in the page\r\n     * @param {String} queryParams.currentPage current page number\r\n     * @param {String =} queryParams.typeCode for filtering on the cms item typeCode\r\n     * @param {String =} queryParams.mask for filtering the search\r\n     * @param {String =} queryParams.itemSearchParams search on additional fields using a comma separated list of field name and value\r\n     * pairs which are separated by a colon. Exact matches only.\r\n     * @param {String =} queryParams.catalogId the catalog to search items in. If empty, the current context catalog will be used.\r\n     * @param {String =} queryParams.catalogVersion the catalog version to search items in. If empty, the current context catalog version will be used.\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the paged search result. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    get<T extends CMSItem = CMSItem>(queryParams: CMSItemSearch, options?: IRestOptions): Promise<IPage<T>>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getByIds\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Fetch CMS Items by uuids, making a POST call to the CMS Items API.\r\n     * A search can be performed by providing a list of cms items uuid.\r\n     *\r\n     * @param {string[] =} uuids list of cms item uuids\r\n     *\r\n     * @returns {Promise<CMSItem[]>} If request is successful, it returns a promise that resolves to the result. If the\r\n     * request fails, it resolves with errors from the backend. Be mindful that the response payload size could\r\n     * increase dramatically depending on the number of uuids that you send on the request.\r\n     */\r\n    getByIds<T extends CMSItem = CMSItem>(uuids: string[], fields?: string): Promise<IPage<T>>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#update\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Update a CMS Item.\r\n     *\r\n     * @param {Object} cmsitem The object representing the CMS Item to update\r\n     * @param {String} cmsitem.identifier The cms item identifier (uuid)\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the updated CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    update<T extends CMSItem = CMSItem>(cmsitem: T, options?: IRestOptions): Promise<T>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#delete\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Remove a CMS Item.\r\n     *\r\n     * @param {Number} cmsitemUuid The CMS Item uuid\r\n     */\r\n    delete(identifier: string, options?: IRestOptions): Promise<void>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#create\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Create a new CMS Item.\r\n     *\r\n     * @param {Object} cmsitem The object representing the CMS Item to create\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    create<T extends CMSItem = CMSItem>(cmsitem: T, options?: IRestOptions): Promise<T>;\r\n    /**\r\n     * The function is same as getByIds but it doesn't use caching, it will request data from backend every time.\r\n     *\r\n     * If request is successful, it returns a promise that resolves to the result. If the\r\n     * request fails, it resolves with errors from the backend. Be mindful that the response payload size could\r\n     * increase dramatically depending on the number of uuids that you send on the request.\r\n     */\r\n    getByIdsNoCache<T extends CMSItem = CMSItem>(uuids: string[], fields?: string, options?: IRestOptions): Promise<IPage<T>>;\r\n    /**\r\n     * @ngdoc method\r\n     * @name cmsitemsRestService.service:cmsitemsRestService#getById\r\n     * @methodOf cmsitemsRestService.cmsitemsRestService\r\n     *\r\n     * @description\r\n     * Get the CMS Item that matches the given item uuid (Universally Unique Identifier).\r\n     *\r\n     * @param {Number} cmsitemUuid The CMS Item uuid\r\n     *\r\n     * @returns {Promise<CMSItem>} If request is successful, it returns a promise that resolves with the CMS Item object. If the\r\n     * request fails, it resolves with errors from the backend.\r\n     */\r\n    getById<T extends CMSItem = CMSItem>(cmsitemUuid: string, options?: IRestOptions): Promise<T>;\r\n    private setDefaultHeader;\r\n    private setHeaderInfo;\r\n}\r\n"}}
