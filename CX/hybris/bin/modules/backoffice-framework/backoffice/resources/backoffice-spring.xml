<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2020 SAP SE or an SAP affiliate company. All rights reserved
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<import resource="excel/backoffice-excel-spring.xml"/>

	<alias name="defaultAuthEventListener" alias="backofficeAuthEventListener"/>
	<bean id="defaultAuthEventListener" class="com.hybris.backoffice.events.auth.DefaultBackofficeAuthListener"/>

	<alias name="platformBackofficeAuthenticationProvider" alias="backofficeAuthenticationProvider"/>
	<bean id="platformBackofficeAuthenticationProvider"
		  class="com.hybris.backoffice.spring.security.BackofficeAuthenticationProvider">
		<property name="userDetailsService" ref="backofficeUserDetailsService"/>
		<property name="userService" ref="userService"/>
		<lookup-method name="getBackofficeAuthEventListener" bean="backofficeAuthEventListener"/>
	</bean>

	<alias name="defaultBackofficeUserDetailsService" alias="backofficeUserDetailsService"/>
	<bean id="defaultBackofficeUserDetailsService"
		  class="com.hybris.backoffice.spring.security.BackofficeUserDetailsService">
		<property name="catalogVersionService" ref="catalogVersionService"/>
		<property name="sessionService" ref="sessionService"/>
		<property name="userService" ref="userService"/>
		<property name="activateCatalogVersions" value="true"/>
		<property name="availableCatalogVersionsTag" ref="availableCatalogVersionsTag"/>
	</bean>

	<alias name="defaultBackofficeRememberMeService" alias="backofficeRememberMeService"/>
	<bean id="defaultBackofficeRememberMeService"
		  class="com.hybris.backoffice.spring.security.BackofficeRememberMeService">
		<property name="key" value="backoffice"/>
		<property name="cookieName" value="LoginToken"/>
		<property name="commonI18NService" ref="commonI18NService"/>
		<!-- avoiding hard reference to tenant-scoped 'coreUserDetailsService' -->
		<lookup-method name="lookupUserDetailsService" bean="backofficeUserDetailsService"/>
	</bean>

	<alias name="defaultBackofficeRoleDao" alias="backofficeRoleDao"/>
	<bean id="defaultBackofficeRoleDao" class="com.hybris.backoffice.daos.impl.DefaultBackofficeRoleDao">
		<property name="flexibleSearchService" ref="flexibleSearchService"/>
	</bean>

	<alias name="defaultBackofficeValidationDao" alias="backofficeValidationDao"/>
	<bean id="defaultBackofficeValidationDao" class="com.hybris.backoffice.daos.impl.DefaultBackofficeValidationDao">
		<property name="flexibleSearchService" ref="flexibleSearchService"/>
	</bean>

	<alias name="defaultBackofficeJobsDao" alias="backofficeJobsDao"/>
	<bean id="defaultBackofficeJobsDao" class="com.hybris.backoffice.daos.impl.DefaultBackofficeJobsDao">
		<property name="flexibleSearchService" ref="flexibleSearchService"/>
	</bean>

	<alias name="defaultBackofficeConfigurationDao" alias="backofficeConfigurationDao"/>
	<bean id="defaultBackofficeConfigurationDao"
		  class="com.hybris.backoffice.daos.impl.DefaultBackofficeConfigurationDao">
		<property name="flexibleSearchService" ref="flexibleSearchService"/>
	</bean>

	<alias name="defaultBackofficeEventSender" alias="backofficeEventSender"/>
	<bean id="defaultBackofficeEventSender" class="com.hybris.backoffice.events.DefaultBackofficeEventSender"/>

	<!-- deprecated since 6.7 -->
	<alias name="defaultBackofficeEventListener" alias="backofficeEventListener"/>
	<bean id="defaultBackofficeEventListener" class="com.hybris.backoffice.events.BackofficeEventListener"
		  parent="abstractEventListener">
		<lookup-method name="getBackofficeEventSender" bean="backofficeEventSender"/>
	</bean>

	<alias name="defaultBackofficeAfterCronJobFinishedEventListener"
		   alias="backofficeAfterCronJobFinishedEventListener"/>
	<bean id="defaultBackofficeAfterCronJobFinishedEventListener"
		  class="com.hybris.backoffice.events.AfterCronJobFinishedEventListener"
		  parent="abstractBackofficeCronJobEventListener">
	</bean>

	<alias name="defaultBackofficeBeforeCronJobStartEventListener" alias="backofficeBeforeCronJobStartEventListener"/>
	<bean id="defaultBackofficeBeforeCronJobStartEventListener"
		  class="com.hybris.backoffice.events.BeforeCronJobStartEventListener"
		  parent="abstractBackofficeCronJobEventListener">
	</bean>

	<bean id="abstractBackofficeCronJobEventListener"
		  class="com.hybris.backoffice.events.AbstractBackofficeCronJobEventListener" parent="abstractEventListener"
		  abstract="true">
		<property name="typeService" ref="typeService"/>
		<property name="eventService" ref="eventService"/>
		<property name="processesIncludes" ref="backofficeCronJobHistoryIncludes"/>
	</bean>

	<alias name="defaultBackofficeProcessEventListener" alias="backofficeProcessEventListener"/>
	<bean id="defaultBackofficeProcessEventListener" class="com.hybris.backoffice.events.processes.ProcessEventListener"
		  parent="abstractEventListener">
		<lookup-method name="getBackofficeEventSender" bean="backofficeEventSender"/>
	</bean>

	<!-- deprecate -->
	<alias name="defaultBackofficeSyncEventListener" alias="backofficeSyncEventListener"/>
	<bean id="defaultBackofficeSyncEventListener" class="com.hybris.backoffice.events.sync.SyncEventListener"
		  parent="abstractEventListener">
		<lookup-method name="getBackofficeEventSender" bean="backofficeEventSender"/>
	</bean>

	<alias name="defaultAfterInitializationEndBackofficeListener" alias="afterInitializationEndBackofficeListener"/>
	<bean id="defaultAfterInitializationEndBackofficeListener"
		  class="com.hybris.backoffice.events.AfterInitializationEndBackofficeListener" lazy-init="false"
		  parent="abstractEventListener"/>

	<alias name="defaultBackofficeCronJobHistoryIncludes" alias="backofficeCronJobHistoryIncludes"/>
	<util:map id="defaultBackofficeCronJobHistoryIncludes" key-type="java.lang.String"
			  value-type="de.hybris.platform.servicelayer.cronjob.CronJobHistoryInclude">
		<entry key="syncProcesses">
			<bean class="de.hybris.platform.servicelayer.cronjob.CronJobHistoryInclude">
				<property name="jobTypeCode" value="#{T(de.hybris.platform.catalog.model.SyncItemJobModel)._TYPECODE}"/>
			</bean>
		</entry>
		<entry key="excelImportProcesses">
			<bean class="de.hybris.platform.servicelayer.cronjob.CronJobHistoryInclude">
				<property name="jobTypeCode" value="#{T(com.hybris.backoffice.model.ExcelImportJobModel)._TYPECODE}"/>
			</bean>
		</entry>
		<entry key="auditReportGeneratorProcess">
			<bean class="de.hybris.platform.servicelayer.cronjob.CronJobHistoryInclude">
				<property name="cronJobTypeCode"
						  value="#{T(de.hybris.platform.auditreport.model.CreateAuditReportCronJobModel)._TYPECODE}"/>
			</bean>
		</entry>

	</util:map>


	<alias name="defaultAuditReportKeyGenerator" alias="auditReportKeyGenerator"/>
	<bean id="defaultAuditReportKeyGenerator"
		  class="de.hybris.platform.servicelayer.keygenerator.impl.PersistentKeyGenerator">
		<property name="type" value="uuid"/>
	</bean>

	<alias name="defaultBackofficeWorkflowService" alias="backofficeWorkflowService"/>
	<bean name="defaultBackofficeWorkflowService" class="com.hybris.backoffice.workflow.impl.BackofficeWorkflowService"
		  parent="newestWorkflowService">
	</bean>

	<alias name="defaultCoreWorkflowFacade" alias="coreWorkflowFacade"/>
	<bean id="defaultCoreWorkflowFacade" class="com.hybris.backoffice.workflow.impl.DefaultCoreWorkflowFacade">
		<property name="workflowAttachmentService" ref="workflowAttachmentService"/>
		<property name="workflowProcessingService" ref="workflowProcessingService"/>
		<property name="workflowService" ref="backofficeWorkflowService"/>
		<property name="workflowTemplateService" ref="workflowTemplateService"/>
	</bean>

	<alias name="defaultBackofficeVariantsService" alias="backofficeVariantsService"/>
	<bean id="defaultBackofficeVariantsService" class="com.hybris.backoffice.variants.DefaultBackofficeVariantsService"
		  parent="variantsService">
		<property name="modelService" ref="modelService"/>
		<property name="variantService" ref="variantsService"/>
		<property name="commonI18NService" ref="commonI18NService"/>
		<property name="sessionService" ref="sessionService"/>
		<property name="userService" ref="userService"/>
	</bean>

	<alias name="defaultCatalogVersionAfterSaveListener" alias="catalogVersionAfterSaveListener"/>
	<bean name="defaultCatalogVersionAfterSaveListener"
		  class="com.hybris.backoffice.listeners.CatalogVersionAfterSaveListener">
		<property name="availableCatalogVersionsTag" ref="availableCatalogVersionsTag"/>
	</bean>

	<alias name="defaultAvailableCatalogVersionsTag" alias="availableCatalogVersionsTag"/>
	<bean id="defaultAvailableCatalogVersionsTag"
		  class="com.hybris.backoffice.catalogversioneventhandling.impl.DefaultAvailableCatalogVersionsTag"
		  init-method="refresh"/>

	<alias name="defaultBackofficeRoleUpdateEventDispatcher" alias="backofficeRoleUpdatedEventDispatcher"/>
	<bean name="defaultBackofficeRoleUpdateEventDispatcher"
		  class="com.hybris.backoffice.listeners.BackofficeRoleUpdatedEventDispatcher">
		<constructor-arg name="modelService" ref="modelService"/>
		<constructor-arg name="eventService" ref="eventService"/>
	</bean>

	<alias name="defaultBackofficeRoleUpdateListenerRegister" alias="backofficeRoleChangeEventListenerRegister"/>
	<bean id="defaultBackofficeRoleUpdateListenerRegister"
		  class="com.hybris.backoffice.listeners.BackofficeRoleChangeEventListenerRegister" lazy-init="false"
		  parent="abstractEventListener"/>

	<alias alias="backofficeRoleService" name="defaultBackofficeRoleService"/>
	<bean id="defaultBackofficeRoleService" class="com.hybris.backoffice.user.DefaultBackofficeRoleService">
		<property name="sessionService" ref="sessionService"/>
		<property name="userService" ref="userService"/>
		<property name="searchRestrictionService" ref="searchRestrictionService"/>
	</bean>

	<alias alias="catalogVersionDao" name="backofficeCatalogVersionDao"/>
	<bean id="backofficeCatalogVersionDao" class="com.hybris.backoffice.daos.impl.BackofficeCatalogVersionDao" parent="defaultCatalogVersionDao">
		<property name="backofficeRoleService" ref="backofficeRoleService"/>
	</bean>

    <alias alias="userService" name="backofficeUserService"/>
    <bean id="backofficeUserService" class="com.hybris.backoffice.user.BackofficeUserService" parent="defaultUserService">
		<property name="backofficeRoleService" ref="backofficeRoleService"/>
	</bean>

	<alias alias="principalHierarchyCheckingStrategy" name="backofficePrincipalHierarchyCheckingStrategy"/>
	<bean id="backofficePrincipalHierarchyCheckingStrategy" class="com.hybris.backoffice.user.BackofficePrincipalHierarchyCheckingStrategy"
		  parent="defaultPrincipalHierarchyCheckingStrategy">
		<property name="backofficeRoleService" ref="backofficeRoleService"/>
		<property name="backofficeUserService" ref="backofficeUserService"/>
	</bean>

	<alias name="defaultItemModelSearchDAO" alias="itemModelSearchDAO"/>
	<bean id="defaultItemModelSearchDAO"
		  class="com.hybris.backoffice.search.daos.impl.DefaultItemModelSearchDAO">
		<property name="flexibleSearchService" ref="flexibleSearchService"/>
	</bean>

	<alias name="defaultCategoryCatalogVersionMapper" alias="categoryCatalogVersionMapper"/>
    <bean id="defaultCategoryCatalogVersionMapper"
          class="com.hybris.backoffice.search.utils.CategoryCatalogVersionMapper"/>

	<alias name="defaultBackofficeThemeConfigDao" alias="backofficeThemeConfigDao"/>
	<bean id="defaultBackofficeThemeConfigDao" class="com.hybris.backoffice.daos.impl.DefaultBackofficeThemeConfigDao">
		<property name="flexibleSearchService" ref="flexibleSearchService"/>
	</bean>

	<alias name="defaultBackofficeThemeDao" alias="backofficeThemeDao"/>
	<bean id="defaultBackofficeThemeDao" class="com.hybris.backoffice.daos.impl.DefaultBackofficeThemeDao">
		<property name="genericSearchService" ref="genericSearchService"/>
	</bean>

	<alias name="defaultBackofficeThemeService" alias="backofficeThemeService" />
    <bean id="defaultBackofficeThemeService" class="com.hybris.backoffice.theme.impl.DefaultBackofficeThemeService">
        <property name="modelService" ref="modelService"/>
        <property name="userService" ref="userService"/>
        <property name="backofficeThemeDao" ref="backofficeThemeDao"/>
        <property name="backofficeThemeConfigDao" ref="backofficeThemeConfigDao"/>
        <property name="defaultThemeCode" value="sap_quartz_light"/>
    </bean>

	<alias name="defaultBackofficeDeletedItemCache" alias="backofficeDeletedItemCache" />
	<bean id="defaultBackofficeDeletedItemCache" class="com.hybris.backoffice.search.cache.impl.DefaultBackofficeDeletedItemCache">
		<property name="defaultCacheController" ref="cacheController" />
		<property name="objectCacheKeyGenerator" ref="deletedItemCacheKeyGenerator" />
	</bean>

	<alias name="deletedItemCacheKeyGenerator" alias="deletedItemCacheKeyGenerator" />
	<bean id="deletedItemCacheKeyGenerator" class="com.hybris.backoffice.search.cache.impl.DeletedItemCacheKeyGeneratorImpl" />

	<!-- label service for backoffice search -->
	<alias name="defaultLabelServiceForSearch" alias="labelServiceForSearch" />
	<bean id="defaultLabelServiceForSearch" class="com.hybris.backoffice.search.resolvers.impl.DefaultLabelServiceForSearch">
		<property name="defaultEnumerationService" ref="enumerationService" />
		<property name="defaultModelValueHandler" ref="modelValueHandlerForSearch" />
		<property name="typeService" ref="typeService" />
	</bean>

	<alias name="defaultModelValueHandlerForSearch" alias="modelValueHandlerForSearch" />
	<bean id="defaultModelValueHandlerForSearch"
		  class="com.hybris.backoffice.search.model.impl.DefaultModelValueHandlerForSearch">
		<property name="expressionResolverFactory" ref="expressionResolverFactoryForSearch" />
	</bean>

	<alias name="defaultExpressionResolverFactoryForSearch" alias="expressionResolverFactoryForSearch"/>
	<bean id="defaultExpressionResolverFactoryForSearch"
		  class="com.hybris.backoffice.search.expression.impl.DefaultExpressionResolverFactoryForSearch">
		<property name="contextFactory" ref="evaluationContextFactoryForSearch"/>
	</bean>

	<alias name="defaultEvaluationContextFactoryForSearch" alias="evaluationContextFactoryForSearch"/>
	<bean id="defaultEvaluationContextFactoryForSearch"
		  class="com.hybris.backoffice.search.expression.impl.DefaultEvaluationContextFactoryForSearch">
		<property name="methodResolvers" ref="methodResolversForSearch"/>
		<property name="additionalPropertyAccessors" ref="propertyAccessorsForSearch"/>
		<property name="beanResolver" ref="fixedBeanResolverForSearch"/>
	</bean>

	<alias name="defaultMethodResolversForSearch" alias="methodResolversForSearch"/>
	<bean id="defaultMethodResolversForSearch" class="org.springframework.beans.factory.config.ListFactoryBean">
		<property name="sourceList">
			<list merge="true">
				<ref bean="secureMethodResolverForSearch"/>
			</list>
		</property>
	</bean>

	<alias alias="secureMethodResolverForSearch" name="secureReflectiveMethodResolverForSearch"/>
	<bean id="secureReflectiveMethodResolverForSearch"
		  class="com.hybris.backoffice.search.model.impl.SecureReflectiveMethodResolverForSearch">
		<property name="deprecatedClasses">
			<list merge="true">
				<value>java.lang.ClassLoader</value>
				<value>com.hybris.backoffice.search.model.impl.SecureReflectiveMethodResolverForSearch</value>
			</list>
		</property>
		<property name="deprecatedPackages">
			<list merge="true">
				<value>java.lang.reflect</value>
			</list>
		</property>
		<property name="allowedStaticClasses">
			<list merge="true">
				<value>org.apache.commons.lang3.StringUtils</value>
				<value>org.apache.commons.collections4.CollectionUtils</value>
				<value>java.util.Arrays</value>
				<value>java.util.Collections</value>
			</list>
		</property>
	</bean>

	<alias name="defaultFixedBeanResolverForSearch" alias="fixedBeanResolverForSearch"/>
	<bean id="defaultFixedBeanResolverForSearch" class="com.hybris.backoffice.search.model.impl.FixedBeanResolverForSearch">
		<property name="availableBeanNames">
			<list>
				<value>labelServiceForSearch</value>
			</list>
		</property>
	</bean>

	<alias name="defaultPropertyAccessorsForSearch" alias="propertyAccessorsForSearch"/>
	<bean id="defaultPropertyAccessorsForSearch" class="org.springframework.beans.factory.config.ListFactoryBean">
		<property name="sourceList">
			<list merge="true">
				<ref bean="mapAccessorForSearch"/>
				<ref bean="localizedModelAccessorForSearch"/>
			</list>
		</property>
	</bean>

	<alias name="defaultMapAccessorForSearch" alias="mapAccessorForSearch"/>
	<bean id="defaultMapAccessorForSearch" class="com.hybris.backoffice.search.model.impl.OrderedMapAccessorForSearch">
		<property name="order" value="500"/>
	</bean>

	<alias name="localizedModelPropertyAccessorForSearch" alias="localizedModelAccessorForSearch"/>
	<bean id="localizedModelPropertyAccessorForSearch"
		  class="com.hybris.backoffice.search.model.impl.LocalizedModelPropertyAccessorForSearch">
		<property name="order" value="300"/>
		<property name="modelService" ref="modelService"/>
		<property name="typeService" ref="typeService"/>
	</bean>
	<!-- label service for backoffice search -->

	<!-- Backoffice Coverage Calculation Service-->
	<alias alias="pcmCoreAttributesCoverageGroupMapping" name="pcmCoreAttributesCoverageGroupMapping"/>
	<bean id="pcmCoreAttributesCoverageGroupMapping" class="de.hybris.platform.validation.coverage.strategies.impl.CoverageCalculationStrategyMapping">
		<property name="domainID" value="pcmCoreAttributesCoverageGroup"/>
		<property name="strategyMap">
			<map>
				<entry key="Product">
					<bean class="de.hybris.platform.validation.coverage.strategies.impl.ValidationBasedCoverageCalculationStrategy">
						<property name="validationService" ref="validationService"/>
						<property name="typeService" ref="typeService"/>
						<property name="coverageConstraintGroupDao" ref="coverageConstraintGroupDao"/>
						<property name="sortProperties" value="true"/>
						<property name="constraintGroupID" value="pcmCoreAttributesCoverageGroup"/>
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<alias alias="pcmMarketingAttributesCoverageGroupMapping" name="pcmMarketingAttributesCoverageGroupMapping"/>
	<bean id="pcmMarketingAttributesCoverageGroupMapping" class="de.hybris.platform.validation.coverage.strategies.impl.CoverageCalculationStrategyMapping">
		<property name="domainID" value="pcmMarketingAttributesCoverageGroup"/>
		<property name="strategyMap">
			<map>
				<entry key="Product">
					<bean class="de.hybris.platform.validation.coverage.strategies.impl.ValidationBasedCoverageCalculationStrategy">
						<property name="validationService" ref="validationService"/>
						<property name="typeService" ref="typeService"/>
						<property name="coverageConstraintGroupDao" ref="coverageConstraintGroupDao"/>
						<property name="sortProperties" value="true"/>
						<property name="constraintGroupID" value="pcmMarketingAttributesCoverageGroup"/>
					</bean>
				</entry>
			</map>
		</property>
	</bean>

	<alias name="backofficeSearchDomainStrategiesList" alias="backofficeSearchDomainStrategiesList"/>
	<util:list id="backofficeSearchDomainStrategiesList" value-type="de.hybris.platform.validation.coverage.strategies.impl.CoverageCalculationStrategyMapping">
		<ref bean="coverageCalculationDefaultDomainMapping" />
		<ref bean="pcmCoreAttributesCoverageGroupMapping" />
		<ref bean="pcmMarketingAttributesCoverageGroupMapping" />
	</util:list>

	<alias alias="backofficeCoverageCalculationStrategyRegistry" name="backofficeCoverageCalculationStrategyRegistry"/>
	<bean id="backofficeCoverageCalculationStrategyRegistry" class="de.hybris.platform.validation.coverage.strategies.impl.DefaultCoverageCalculationStrategyRegistry">
		<property name="domainStrategies" ref="backofficeSearchDomainStrategiesList"/>
		<property name="typeService" ref="typeService"/>
	</bean>

	<alias alias="backofficeCoverageCalculationService" name="defaultBackofficeCoverageCalculationService"/>
	<bean id="defaultBackofficeCoverageCalculationService" class="de.hybris.platform.validation.coverage.impl.DefaultCoverageCalculationService">
		<property name="strategyRegistry" ref="backofficeCoverageCalculationStrategyRegistry"/>
	</bean>
	<!-- Backoffice Coverage Calculation Service-->

</beans>
